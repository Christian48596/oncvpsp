19c19,21
< ! self-consistent pseudoatom calculation
---
> ! Self-consistent pseudoatom calculation for fully-relativistic
> ! pseudopotentials. Orbital occupancies are always weighted with the
> ! scalar-relativistic averaging factors, even for partially-occupied levels.
21c23
<  subroutine psatom(na,la,ea,fa,nv,it,rhoc,rho, &
---
>  subroutine psatom_r(na,la,ea,fa,nv,it,rhoc,rho, &
50c52
<  integer :: na(nv),la(nv),nproj(5)
---
>  integer :: na(30),la(30),nproj(5)
52,53c54,55
<  real(dp) :: fa(nv),rr(mmax)
<  real(dp) :: vpuns(mmax,5),vkb(mmax,2,4),evkb(2,4)
---
>  real(dp) :: fa(30),rr(mmax)
>  real(dp) :: vpuns(mmax,5),vkb(mmax,2,4,2),evkb(2,4,2)
58c60
<  real(dp) :: ea(nv)
---
>  real(dp) :: ea(30,2)
60c62
<  real(dp) :: uua(mmax,nv)
---
>  real(dp) :: uua(mmax,2,nv)
65c67
<  real(dp) :: dr,eeel,eexc,et,emin,emax,rl,rl1,sd,sn,sls,eeig
---
>  real(dp) :: dr,eeel,eexc,et,emin,emax,rl,rl1,sd,sn,sls,eeig,fj
67c69
<  integer :: ii,jj,l1,ierr
---
>  integer :: ii,jj,l1,ll,ikap,kap,mkap,ierr
74d75
< 
95d95
< 
129d128
<      et=ea(ii)
131a131,136
>      ll = la(ii)
>      if(ll==0) then
>       mkap=1
>      else
>       mkap=2
>      end if
132a138,147
> ! loop on J = ll +/- 1/2
>      do ikap=1,mkap
>       if(ikap==1) then
>         kap=-(ll+1)
>         fj=dble(ll+1)*fa(ii)/dble(2*ll+1)
>       else
>         kap=  ll
>         fj=dble(ll)*fa(ii)/dble(2*ll+1)
>       end if
>       et=ea(ii,ikap)
135,140c150,155
<      sls=(l1-1)*l1
<      emax=vtot(mmax)+0.5d0*sls/rr(mmax)**2
<      emin=emax
<      do jj=1,mmax
<        emin=dmin1(emin,vpuns(jj,l1)+vi(jj)+0.5d0*sls/rr(jj)**2)
<      end do
---
>       sls=(l1-1)*l1
>       emax=vtot(mmax)+0.5d0*sls/rr(mmax)**2
>       emin=emax
>       do jj=1,mmax
>         emin=dmin1(emin,vpuns(jj,l1)+vi(jj)+0.5d0*sls/rr(jj)**2)
>       end do
143,159c158,174
<      if(okb==0) then
<        call lschpb(na(ii),la(ii),ierr,et, &
< &                  rr,vp,uu,up,mmax,mch)
<      else if(okb==1) then
<        call lschvkbb(na(ii),la(ii),nproj(l1),ierr,et,emin,emax, &
< &                   rr,vtot,vkb(1,1,l1),evkb(1,l1),uu,up,mmax,mch)
<      else
<        write(6,'(a,i4)') 'psatom: argument ERROR - okb=',okb
<        stop
<      end if
<      uua(:,ii) = uu
<      
<      if(ierr .ne. 0) then
<        write(6,'(/a,4i4)') 'psatom: WARNING lschvkbb convergence error n,l,okb,iter=', &
< &       na(ii),la(ii),okb,it
<         exit
<      end if
---
>       if(okb==0) then
>         call lschpb(na(ii),la(ii),ierr,et, &
> &                   rr,vp,uu,up,mmax,mch)
>       else if(okb==1) then
>         call lschvkbb(na(ii),la(ii),nproj(l1),ierr,et,emin,emax, &
> &                   rr,vtot,vkb(1,1,l1,ikap),evkb(1,l1,ikap),uu,up,mmax,mch)
>       else
>         write(6,'(a,i4)') 'psatom: argument ERROR - okb=',okb
>         stop
>       end if
>       uua(:,ikap,ii) = uu
> 
>       if(ierr .ne. 0) then
>        write(6,'(/a,4i4)') 'psatom: WARNING lschvkbb convergence error n,l,kap,iter=', &
> &       na(ii),la(ii),kap,it
>        exit
>       end if
162,163c177,178
<      if(ea(ii)/= et) convg=.false.
<      ea(ii)=et
---
>       if(ea(ii,ikap)/= et) convg=.false.
>       ea(ii,ikap)=et
166,167c181,182
<      eeig = eeig + fa(ii) * ea(ii)
<      rho(:)=rho(:) + fa(ii)*(uu(:)/rr(:))**2
---
>       eeig = eeig + fj*ea(ii,ikap)
>       rho(:)=rho(:) + fj*(uu(:)/rr(:))**2
168a184,185
>     end do !ikap
>     if(ierr/=0) exit
223c240
<  end subroutine psatom
---
>  end subroutine psatom_r
